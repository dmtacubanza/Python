# -*- coding: utf-8 -*-
"""Eskwelabs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zyxNKnYExMdg7dKsULFR3d7i2UWSE3Px

# Pivoting data

*   Import the necessary libraries (e.g. pandas)
*   Load the data into a pandas DataFrame
*   Select the column(s) to use as index (e.g. "date" column)
*   Select the column(s) to use as column headers (e.g. "category" column)
*   Select the column(s) to use as values (e.g. "value" column)
*   Apply the pivot function with the selected columns as parameters
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.pylab import rcParams
rcParams['figure.figsize'] = 12,6
plt.style.use('ggplot')

df = pd.read_csv('/content/train.csv') # reading data into dataframe
df.head() # displaying first five values

df.drop(['PassengerId','Ticket','Name'],axis=1,inplace=True)
df.head()

#Group data using index in a pivot table
table1 = pd.pivot_table(data=df,index=['Sex'])
table1
table1.plot(kind='bar')

# multiple indexes

table2 = pd.pivot_table(df,index=['Sex','Pclass'])
table2
table2.plot(kind='bar')

# different aggregate functions

table3 = pd.pivot_table(df,index=['Sex','Pclass'],
                        aggfunc={'Age':np.mean,'Survived':np.sum})
table3
table3.plot(kind='bar')

#Aggregate on specific features with values parameter
table4 = pd.pivot_table(df,index=['Sex','Pclass'],
                        values=['Survived'],
                        aggfunc=np.mean)
table4
table4.plot(kind='bar')

#Find the relationship between features with columns parameter
table5 = pd.pivot_table(df,index=['Sex'],
                        columns=['Pclass'],
                        values=['Survived'],
                        aggfunc=np.sum)
table5
table5.plot(kind='bar');

#Handling missing data
# display null values
table6 = pd.pivot_table(df,index=['Sex','Survived','Pclass'],
                        columns=['Embarked'],
                        values=['Age'],
                        aggfunc=np.mean)
table6.head()

#handling null values
table7 = pd.pivot_table(df,index=['Sex','Survived','Pclass'],
                        columns=['Embarked'],
                        values=['Age'],
                        aggfunc=np.mean,
                        fill_value=np.mean(df['Age']))
table7.head()

"""# Unpivoting data
Import the necessary libraries (e.g. pandas)

*   Load the data into a pandas DataFrame
*   Select the column(s) to use as index (e.g. "date" column)
*   Select the column(s) to use as column headers (e.g. "category" column)
*   Select the column(s) to use as values (e.g. "value" column)
*   Apply the melt function with the selected columns as parameters
"""

import pandas as pd
# Read in dataset as csv

wholesale = pd.read_csv('/content/Wholesale customers data.csv')
wholesale.head()

# Let's unpivot!
# `frame` argument: what DataFrame to manipulate
# `id_vars`: what is unique identifier
# `value_vars`: which variables to melt
# `var_name`: name the resulting values column
# `value_name` to name the resulting labels column


wholesale_pivot = pd.melt(frame=wholesale, id_vars = ['Channel', 'Region'],
 value_vars=wholesale.columns[2:], value_name='Sales',
 var_name='Category')

wholesale_pivot.head()

wholesale_pivot.shape

import os
import pandas as pd

INPUT_DIR = "/kaggle/input/godaddy-microbusiness-density-forecasting"
census_df = pd.read_csv(os.path.join(INPUT_DIR, "census_starter.csv"))


def melt_all(original_df):
    """Unpivot all the feature columns"""
    for feature in ["pct_bb", "pct_college", "pct_foreign_born", "pct_it_workers", "median_hh_inc"]:
        cols = sorted([col for col in original_df.columns if col.startswith(feature)])
        df = original_df[(["cfips"] + cols)]
        df = df.melt(
            id_vars="cfips",
            value_vars=cols,
            var_name="year",
            value_name=feature).sort_values(by=["cfips", "year"])
        df["year"] = df["year"].str.split("_").str[-1].astype(int)
        yield df

dfs = melt_all(census_df)
census_unpivoted = next(dfs)

for df in dfs:
    census_unpivoted = census_unpivoted.merge(df, on=["cfips", "year"])


census_unpivoted.to_csv("census_unpivoted.csv", index=False)