# -*- coding: utf-8 -*-
"""Pandas_Descriptive_Statistics_ASE

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19MhCOw_cnCUVf_GKt4gkPGYPmzWJGKTw
"""



"""# Sources:

*   [Getting Started with Pandas](https://pandas.pydata.org/docs/getting_started/intro_tutorials/06_calculate_statistics.html)
*   [Learn Pandas with Kaggle](https://www.kaggle.com/learn/pandas)

This report uses the Titanic data set, stored as CSV. The data consists of the following data columns:

*   **PassengerId**: Id of every passenger.
*   **Survived**: Indication whether passenger survived. 0 for yes and 1 for no.
*   **Pclass**: One out of the 3 ticket classes: Class 1, Class 2 and Class 3.
*   **Name**: Name of passenger.
*   **Sex**: Gender of passenger.
*   **Age**: Age of passenger in years.
*   **SibSp**: Number of siblings or spouses aboard.
*   **Parch**: Number of parents or children aboard.
*   **Ticket**: Ticket number of passenger.
*   **Fare**: Indicating the fare.
*   **Cabin**: Cabin number of passenger.
*   **Embarked**: Port of embarkation.

*Engr. Darwin Tacubanza*

# Importing Pandas module
"""

import pandas as pd

"""Data Set"""

titanic = pd.read_csv("Titanic_data.csv")
titanic.head()

"""What is the average age of the Titanic passengers?"""

titanic["Age"].mean()

"""What is the median age and ticket fare price of the Titanic passengers?"""

titanic[["Age", "Fare"]].median()

"""The statistic applied to multiple columns of a `DataFrame` (the selection of two columns returns a `DataFrame`, see the subset data tutorial) is calculated for each numeric column."""

titanic[["Age", "Fare"]].describe()

"""Instead of the predefined statistics, specific combinations of aggregating statistics for given columns can be defined using the `DataFrame.agg()` method:"""

titanic.agg(
    {
        "Age": ["min", "max", "median", "skew"],
        "Fare": ["min", "max", "median", "mean"],
    }
)

"""# Aggregating statistics grouped by category

What is the average age for male versus female Titanic passengers?
"""

titanic[["Sex", "Age"]].groupby("Sex").mean()

titanic[["Pclass","Age"]].groupby("Pclass").mean()

"""As our interest is the average age for each gender, a subselection on these two columns is made first: titanic[["Sex", "Age"]]. Next, the `groupby()` method is applied on the Sex column to make a group per category. The average age for each gender is calculated and returned.

Calculating a given statistic (e.g. mean age) for each category in a column (e.g. male/female in the Sex column) is a common pattern. The groupby method is used to support this type of operations. This fits in the more general split-apply-combine pattern:

Split the data into groups

Apply a function to each group independently

Combine the results into a data structure

The apply and combine steps are typically done together in pandas.
"""

titanic.groupby("Sex").mean(numeric_only=True)

"""The **Pclass** column contains numerical data but actually represents 3 categories (or factors) with respectively the labels ‘1’, ‘2’ and ‘3’. Calculating statistics on these does not make much sense. Therefore, pandas provides a Categorical data type to handle this type of data. More information is provided in the user guide Categorical data section.

What is the mean ticket fare price for each of the sex and cabin class combinations?
"""

titanic.groupby(["Sex", "Pclass"])["Fare"].mean()

"""Grouping can be done by multiple columns at the same time. Provide the column names as a list to the `groupby()` method.

# Count number of records by category

What is the number of passengers in each of the cabin classes?
"""

titanic["Pclass"].value_counts()

"""The `value_counts()` method counts the number of records for each category in a column.

The function is a shortcut, as it is actually a groupby operation in combination with counting of the number of records within each group:
"""

titanic.groupby("Pclass")["Pclass"].count()

"""*Both size and count can be used in combination with groupby. Whereas size includes NaN values and just provides the number of rows (size of the table), count excludes the missing values. In the value_counts method, use the dropna argument to include or exclude the NaN values.*

# Summary


*   Aggregation statistics can be calculated on entire columns or rows.
*   `groupby` provides the power of the split-apply-combine pattern.
*   `value_counts` is a convenient shortcut to count the number of entries in each category of a variable.

# Thank you!
"""

